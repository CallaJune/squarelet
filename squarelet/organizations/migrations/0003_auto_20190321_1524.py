# Generated by Django 2.1.7 on 2019-03-21 15:24

# Django
from django.conf import settings
from django.db import migrations

# Third Party
import stripe

stripe.api_key = settings.STRIPE_SECRET_KEY
stripe.api_version = "2018-09-24"

PLANS = [
    {
        "name": "Free",
        "slug": "free",
        "minimum_users": 1,
        "base_price": 0,
        "price_per_user": 0,
        "feature_level": 0,
        "public": True,
        "annual": False,
        "for_individuals": True,
        "for_groups": True,
    },
    {
        "name": "Professional",
        "slug": "professional",
        "minimum_users": 1,
        "base_price": 40,
        "price_per_user": 0,
        "feature_level": 1,
        "public": True,
        "annual": False,
        "for_individuals": True,
        "for_groups": False,
    },
    {
        "name": "Organization",
        "slug": "organization",
        "minimum_users": 5,
        "base_price": 100,
        "price_per_user": 10,
        "feature_level": 2,
        "public": True,
        "annual": False,
        "for_individuals": False,
        "for_groups": True,
    },
    {
        "name": "Organization Plus",
        "slug": "organization-plus",
        "minimum_users": 5,
        "base_price": 200,
        "price_per_user": 20,
        "feature_level": 2,
        "public": False,
        "annual": False,
        "for_individuals": False,
        "for_groups": True,
    },
    {
        "name": "Admin",
        "slug": "admin",
        "minimum_users": 1,
        "base_price": 0,
        "price_per_user": 0,
        "feature_level": 2,
        "public": False,
        "annual": False,
        "for_individuals": True,
        "for_groups": True,
    },
    {
        "name": "Beta",
        "slug": "beta",
        "minimum_users": 1,
        "base_price": 0,
        "price_per_user": 0,
        "feature_level": 1,
        "public": False,
        "annual": False,
        "for_individuals": True,
        "for_groups": False,
    },
    {
        "name": "Proxy",
        "slug": "proxy",
        "minimum_users": 1,
        "base_price": 0,
        "price_per_user": 0,
        "feature_level": 1,
        "public": False,
        "annual": False,
        "for_individuals": True,
        "for_groups": False,
    },
    {
        "name": "Manual Pay Organization",
        "slug": "manual-pay-organization",
        "minimum_users": 5,
        "base_price": 100,
        "price_per_user": 10,
        "feature_level": 2,
        "public": False,
        "annual": True,
        "for_individuals": False,
        "for_groups": True,
    },
]


def make_stripe_plan(plan):
    """Create the plan on stripe"""
    if not (plan.base_price == 0 and plan.price_per_user == 0):
        try:
            # set up the pricing for groups and individuals
            # convert dollar amounts to cents for stripe
            if plan.for_groups:
                kwargs = {
                    "billing_scheme": "tiered",
                    "tiers": [
                        {
                            "flat_amount": 100 * plan.base_price,
                            "up_to": plan.minimum_users,
                        },
                        {"unit_amount": 100 * plan.price_per_user, "up_to": "inf"},
                    ],
                    "tiers_mode": "graduated",
                }
            else:
                kwargs = {"billing_scheme": "per_unit", "amount": 100 * plan.base_price}
            stripe.Plan.create(
                id=f"squarelet_plan_{plan.slug}",
                currency="usd",
                interval="year" if plan.annual else "month",
                product={"name": plan.name, "unit_label": "Seats"},
                **kwargs,
            )
        except stripe.error.InvalidRequestError:
            # if the plan already exists, just skip
            pass


def add_plans(apps, schema_editor):
    Plan = apps.get_model("organizations", "Plan")
    for plan in PLANS:
        obj = Plan.objects.create(**plan)
        make_stripe_plan(obj)


def remove_plans(apps, schema_editor):
    Plan = apps.get_model("organizations", "Plan")
    Plan.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [("organizations", "0002_auto_20190321_1516")]

    operations = [migrations.RunPython(add_plans, remove_plans)]
